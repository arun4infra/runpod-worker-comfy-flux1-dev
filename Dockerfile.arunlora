# Stage 1: Base image with common dependencies
FROM nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04 as base

# Prevents prompts from packages asking for user input during installation
ENV DEBIAN_FRONTEND=noninteractive
# Prefer binary wheels over source distributions for faster pip installations
ENV PIP_PREFER_BINARY=1
# Ensures output from python is printed immediately to the terminal without buffering
ENV PYTHONUNBUFFERED=1 
# Speed up some cmake builds
ENV CMAKE_BUILD_PARALLEL_LEVEL=8

# Install Python, git and other necessary tools
RUN apt-get update && apt-get install -y \
    python3.10 \
    python3-pip \
    git \
    wget \
    libgl1 \
    && ln -sf /usr/bin/python3.10 /usr/bin/python \
    && ln -sf /usr/bin/pip3 /usr/bin/pip

# Clean up to reduce image size
RUN apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/*

# Install comfy-cli
RUN pip install comfy-cli

# Install ComfyUI
RUN /usr/bin/yes | comfy --workspace /comfyui install --cuda-version 11.8 --nvidia --version 0.3.26

# Change working directory to ComfyUI
WORKDIR /comfyui

# Install runpod
RUN pip install runpod requests

# Support for the network volume
ADD src/extra_model_paths.yaml ./

# Go back to the root
WORKDIR /

# Add scripts
ADD src/start.sh src/restore_snapshot.sh src/rp_handler.py test_input.json ./
RUN chmod +x /start.sh /restore_snapshot.sh

# Optionally copy the snapshot file
ADD *snapshot*.json /

# Restore the snapshot to install custom nodes
RUN /restore_snapshot.sh

# Start container
CMD ["/start.sh"]

# Stage 2: Download models
FROM base as downloader

ARG HUGGINGFACE_ACCESS_TOKEN
ARG MODEL_TYPE

# Validate MODEL_TYPE - only allow flux1-dev-2r8n-multi-lora
RUN if [ "$MODEL_TYPE" != "flux1-dev-2r8n-multi-lora" ]; then \
      echo "ERROR: Only MODEL_TYPE=flux1-dev-2r8n-multi-lora is supported"; \
      exit 1; \
    fi

# Change working directory to ComfyUI
WORKDIR /comfyui

# Create necessary directories with explicit permissions
RUN mkdir -p models/checkpoints models/vae models/unet models/clip models/loras && \
    chmod -R 755 models

# Echo current directories for debugging
RUN echo "Current directory: $(pwd)" && ls -la models/

# Download base models for flux1-dev-2r8n-multi-lora
RUN wget -c --timeout=720000 --tries=infinite --header="Authorization: Bearer ${HUGGINGFACE_ACCESS_TOKEN}" -O models/unet/flux1-dev.safetensors https://huggingface.co/arun-subramanian-c/flux1-dev-models/resolve/main/flux1-dev.safetensors && \
    wget -O models/clip/clip_l.safetensors https://huggingface.co/arun-subramanian-c/flux1-dev-models/resolve/main/clip_l.safetensors && \
    wget -O models/clip/t5xxl_fp8_e4m3fn.safetensors https://huggingface.co/arun-subramanian-c/flux1-dev-models/resolve/main/t5xxl_fp8_e4m3fn.safetensors && \
    wget --header="Authorization: Bearer ${HUGGINGFACE_ACCESS_TOKEN}" -O models/vae/ae.safetensors https://huggingface.co/arun-subramanian-c/flux1-dev-models/resolve/main/ae.safetensors

# Download LoRA models for flux1-dev-2r8n-multi-lora
RUN wget --header="Authorization: Bearer ${HUGGINGFACE_ACCESS_TOKEN}" -O models/loras/flux1_dev_lora_arun_v1.safetensors https://huggingface.co/arun-subramanian-c/flux1-dev-models/resolve/main/flux_lora_arun_v1.safetensors && \
    wget --header="Authorization: Bearer ${HUGGINGFACE_ACCESS_TOKEN}" -O models/loras/flux_realism_lora.safetensors https://huggingface.co/arun-subramanian-c/flux1-dev-models/resolve/main/flux_realism_lora.safetensors

# Stage 3: Final image
FROM base as final

# Copy models from stage 2 to the final image
COPY --from=downloader /comfyui/models /comfyui/models

# Start container
CMD ["/start.sh"]
